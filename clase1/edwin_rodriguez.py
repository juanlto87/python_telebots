import math

# ===============================================================
# PASO 1: Definir la funci√≥n que comprueba si un n√∫mero es primo
# ===============================================================
def es_primo(numero):
    """
    Funci√≥n auxiliar que determina si un n√∫mero es primo.
    Devuelve True si lo es, y False si no lo es.
    """
    # Los n√∫meros menores o iguales a 1 no son considerados primos.
    if numero <= 1:
        return False
    
    # El 2 es el √∫nico n√∫mero primo que es par.
    if numero == 2:
        return True
    
    # Si el n√∫mero es par y no es 2, no es primo.
    if numero % 2 == 0:
        return False

    # Revisamos solo los divisores impares hasta la ra√≠z cuadrada del n√∫mero.
    # Es una optimizaci√≥n clave que acelera mucho el proceso.
    limite = int(math.sqrt(numero)) + 1
    for divisor in range(3, limite, 2):  # El '2' al final hace que salte de 2 en 2 (3, 5, 7...)
        if numero % divisor == 0:
            return False # Si encontramos un divisor, ya no es primo.
            
    # Si el bucle termina sin encontrar divisores, el n√∫mero es primo.
    return True

# ===============================================================
# PASO 2: Escribir el programa principal que usa la funci√≥n
# ===============================================================

# --- Programa Principal ---

print("--- Buscador de N√∫meros Primos --- por Edwin Rodriguez con el apoyo de IA :-)")

# 1. Solicitar el n√∫mero al usuario y validarlo
while True:
    try:
        n_str = input("Introduce un n√∫mero entero hasta el cual buscar primos: ")
        n = int(n_str)
        if n >= 2:
            break # El n√∫mero es v√°lido, salimos del bucle.
        else:
            print("Por favor, introduce un n√∫mero que sea 2 o mayor.")
    except ValueError:
        print("Entrada no v√°lida. Debes introducir un n√∫mero entero.")

# 2. Crear una lista para almacenar los n√∫meros primos encontrados
lista_primos_encontrados = []

# 3. Recorrer todos los n√∫meros desde 2 hasta n
print(f"\nBuscando n√∫meros primos del 1 al {n}...")
for numero_a_evaluar in range(2, n + 1):
    
    # 4. Llamar a nuestra funci√≥n para cada n√∫mero
    if es_primo(numero_a_evaluar):
        # Si la funci√≥n devuelve True, a√±adimos el n√∫mero a la lista
        lista_primos_encontrados.append(numero_a_evaluar)

# 5. Mostrar el resultado final al usuario
print("\n¬°B√∫squeda completada!")
print(f"Los n√∫meros primos encontrados son:")
print(lista_primos_encontrados)


# Importamos los m√≥dulos necesarios al principio del script.
# - 'random' para elegir una frase al azar.
# - 'datetime' para obtener la fecha actual.
# - 'locale' para mostrar la fecha en espa√±ol (opcional pero recomendado).
import random
from datetime import date
import locale

# --- Configuraci√≥n Inicial (Opcional pero mejora la experiencia) ---
# Intentamos configurar el idioma a espa√±ol para que la fecha se muestre correctamente.
# Si el sistema no tiene el paquete de idioma 'es_ES.UTF-8', usar√° el formato por defecto.
try:
    # Para sistemas Linux/macOS
    locale.setlocale(locale.LC_TIME, 'es_ES.UTF-8')
except locale.Error:
    try:
        # Para sistemas Windows
        locale.setlocale(locale.LC_TIME, 'Spanish')
    except locale.Error:
        print("Advertencia: No se pudo configurar el idioma a espa√±ol. La fecha se mostrar√° en el formato del sistema.")


# --- Lista de Frases Motivacionales ---
frases_motivacionales = [
    "El √∫nico modo de hacer un gran trabajo es amar lo que haces. - Steve Jobs",
    "La vida es 10% lo que te pasa y 90% c√≥mo reaccionas a ello. - Charles R. Swindoll",
    "El √©xito es la suma de peque√±os esfuerzos repetidos d√≠a tras d√≠a. - Robert Collier",
    "Cree que puedes y ya est√°s a medio camino. - Theodore Roosevelt",
    "No esperes. El momento nunca ser√° el adecuado. - Napoleon Hill"
]


# --- Bucle Principal del Men√∫ ---
# Usamos un bucle 'while True' para que el men√∫ se muestre repetidamente
# hasta que el usuario elija la opci√≥n de salir.
while True:
    # 1. Mostrar las opciones del men√∫ al usuario
    print("\n" + "="*30)
    print("      MEN√ö PRINCIPAL USANDO ASISTENTE DE IA  ")
    print("="*30)
    print("1. Mostrar una frase motivacional")
    print("2. Mostrar la fecha actual")
    print("3. Salir del programa")
    print("="*30)

    # 2. Solicitar la elecci√≥n del usuario
    opcion = input("Por favor, elige una opci√≥n (1, 2 o 3): ")

    # 3. Procesar la elecci√≥n usando if/elif/else
    if opcion == '1':
        # Opci√≥n 1: Mostrar frase motivacional
        print("\n‚ú® Frase del d√≠a ‚ú®")
        frase_elegida = random.choice(frases_motivacionales)
        print(f"-> {frase_elegida}")
        input("\n(Presiona Enter para volver al men√∫...)") # Pausa para que el usuario pueda leer

    elif opcion == '2':
        # Opci√≥n 2: Mostrar la fecha actual
        print("\nüìÖ Fecha Actual üìÖ")
        fecha_de_hoy = date.today()
        # Usamos .strftime() para formatear la fecha de una manera legible
        # %A: Nombre completo del d√≠a de la semana (Lunes)
        # %d: D√≠a del mes (01, 31)
        # %B: Nombre completo del mes (Enero)
        # %Y: A√±o con 4 d√≠gitos (2023)
        print(f"-> Hoy es {fecha_de_hoy.strftime('%A, %d de %B de %Y')}")
        input("\n(Presiona Enter para volver al men√∫...)") # Pausa

    elif opcion == '3':
        # Opci√≥n 3: Salir del programa
        print("\n¬°Gracias por usar el programa! ¬°Hasta luego! üëã")
        break  # 'break' rompe el bucle 'while True' y termina el programa

    else:
        # Si el usuario introduce algo diferente a '1', '2' o '3'
        print("\n‚ùå Opci√≥n no v√°lida. Por favor, introduce un n√∫mero del 1 al 3.")
        input("\n(Presiona Enter para intentarlo de nuevo...)")