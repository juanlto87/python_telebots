# Ejercicio 1: Objetos - Libro
class Libro:
    """
    Clase Libro que representa un libro con sus caracter√≠sticas b√°sicas.
    
    Atributos:
    - titulo: Nombre del libro
    - autor: Autor del libro
    - a√±o: A√±o de publicaci√≥n
    - genero: G√©nero literario
    - paginas: N√∫mero de p√°ginas
    - leido: Estado de lectura (True/False)
    
    M√©todos:
    - leer(): Marca el libro como le√≠do
    - obtener_info(): Muestra informaci√≥n del libro
    - es_clasico(): Determina si es un libro cl√°sico (m√°s de 50 a√±os)
    """
    
    def __init__(self, titulo, autor, a√±o, genero, paginas):
        self.titulo = titulo
        self.autor = autor
        self.a√±o = a√±o
        self.genero = genero
        self.paginas = paginas
        self.leido = False
    
    def leer(self):
        """Marca el libro como le√≠do"""
        self.leido = True
        print(f"Has terminado de leer '{self.titulo}'")
    
    def obtener_info(self):
        """Muestra la informaci√≥n completa del libro"""
        estado = "Le√≠do" if self.leido else "No le√≠do"
        return f"""
        T√≠tulo: {self.titulo}
        Autor: {self.autor}
        A√±o: {self.a√±o}
        G√©nero: {self.genero}
        P√°ginas: {self.paginas}
        Estado: {estado}
        """
    
    def es_clasico(self):
        """Determina si el libro es cl√°sico (m√°s de 50 a√±os)"""
        from datetime import datetime
        a√±o_actual = datetime.now().year
        return (a√±o_actual - self.a√±o) > 50

def ejercicio1():
    """Ejercicio 1: Crear y usar objetos Libro"""
    print("=" * 50)
    print("EJERCICIO 1: OBJETOS - LIBRO")
    print("=" * 50)
    
    # Crear objetos libro
    libro1 = Libro("Cien a√±os de soledad", "Gabriel Garc√≠a M√°rquez", 1967, "Realismo m√°gico", 432)
    libro2 = Libro("1984", "George Orwell", 1949, "Distop√≠a", 328)
    libro3 = Libro("El Principito", "Antoine de Saint-Exup√©ry", 1943, "Infantil", 96)
    
    # Realizar operaciones
    print("Informaci√≥n inicial de los libros:")
    print(libro1.obtener_info())
    print(libro2.obtener_info())
    print(libro3.obtener_info())
    
    # Leer algunos libros
    libro1.leer()
    libro3.leer()
    
    # Verificar si son cl√°sicos
    print(f"\n¬ø'{libro1.titulo}' es cl√°sico? {libro1.es_clasico()}")
    print(f"¬ø'{libro2.titulo}' es cl√°sico? {libro2.es_clasico()}")
    print(f"¬ø'{libro3.titulo}' es cl√°sico? {libro3.es_clasico()}")
    
    print("\n**Explicaci√≥n del objeto Libro:**")
    print("Eleg√≠ el objeto Libro porque es f√°cil de entender y √∫til para gestionar una biblioteca personal.")
    print("Permite almacenar informaci√≥n importante como t√≠tulo, autor, a√±o, g√©nero y p√°ginas.")
    print("Los m√©todos permiten interactuar con el libro: marcarlo como le√≠do, obtener informaci√≥n y verificar si es cl√°sico.")

def ejercicio2():
    """Ejercicio 2: Listas y diccionarios"""
    print("\n" + "=" * 50)
    print("EJERCICIO 2: LISTAS Y DICCIONARIOS")
    print("=" * 50)
    
    # Lista con 3 pel√≠culas favoritas
    peliculas_favoritas = ["El Padrino", "Pulp Fiction", "Forrest Gump"]
    
    # Diccionario con informaci√≥n de cada pel√≠cula (nombre, g√©nero, a√±o)
    informacion_peliculas = {
        "El Padrino": {
            "genero": "Drama",
            "a√±o": 1972
        },
        "Pulp Fiction": {
            "genero": "Crimen",
            "a√±o": 1994
        },
        "Forrest Gump": {
            "genero": "Drama",
            "a√±o": 1994
        }
    }
    
    # Imprimir operaciones
    print("Mis 3 pel√≠culas favoritas:")
    for i, pelicula in enumerate(peliculas_favoritas, 1):
        print(f"{i}. {pelicula}")
    
    print(f"\nPrimera pel√≠cula favorita: {peliculas_favoritas[0]}")
    print(f"√öltima pel√≠cula favorita: {peliculas_favoritas[-1]}")
    print(f"Total de pel√≠culas: {len(peliculas_favoritas)}")
    
    print("\nInformaci√≥n detallada de cada pel√≠cula:")
    for pelicula in peliculas_favoritas:
        info = informacion_peliculas[pelicula]
        print(f"\nüé¨ {pelicula}:")
        print(f"   G√©nero: {info['genero']}")
        print(f"   A√±o: {info['a√±o']}")
    
    print("\nOperaciones con el diccionario:")
    print(f"Pel√≠cula m√°s antigua: {min(informacion_peliculas.items(), key=lambda x: x[1]['a√±o'])[0]}")
    print(f"Pel√≠cula m√°s reciente: {max(informacion_peliculas.items(), key=lambda x: x[1]['a√±o'])[0]}")
    
    # Contar g√©neros
    generos = [info['genero'] for info in informacion_peliculas.values()]
    print(f"G√©neros: {', '.join(set(generos))}")

# Ejercicio 3: Trivia con POO
class Pregunta:
    """
    Clase Pregunta para crear preguntas de trivia.
    
    Atributos:
    - enunciado: La pregunta a realizar
    - opciones: Lista de opciones posibles
    - respuesta: N√∫mero de la opci√≥n correcta (1-4)
    """
    
    def __init__(self, enunciado, opciones, respuesta):
        self.enunciado = enunciado
        self.opciones = opciones
        self.respuesta = respuesta
    
    def mostrar_pregunta(self):
        """Muestra la pregunta y sus opciones"""
        print(f"\n{self.enunciado}")
        for i, opcion in enumerate(self.opciones, 1):
            print(f"{i}. {opcion}")
    
    def verificar_respuesta(self, respuesta_usuario):
        """Verifica si la respuesta del usuario es correcta"""
        return respuesta_usuario == self.respuesta

def ejercicio3():
    """Ejercicio 3: Trivia con POO"""
    print("\n" + "=" * 50)
    print("EJERCICIO 3: TRIVIA CON POO")
    print("=" * 50)
    
    # Crear preguntas de trivia
    preguntas = [
        Pregunta(
            "¬øCu√°l es la capital de Ecuador?",
            ["Guayaquil", "Quito", "Cuenca", "Ambato"],
            2
        ),
        Pregunta(
            "¬øEn qu√© a√±o se fund√≥ Python?",
            ["1989", "1991", "1995", "2000"],
            2
        ),
        Pregunta(
            "¬øCu√°l es el planeta m√°s grande del sistema solar?",
            ["Tierra", "Marte", "J√∫piter", "Saturno"],
            3
        )
    ]
    
    puntuacion = 0
    total_preguntas = len(preguntas)
    
    print("¬°Bienvenido a la trivia!")
    print(f"Responde las siguientes {total_preguntas} preguntas:")
    
    for i, pregunta in enumerate(preguntas, 1):
        print(f"\nPregunta {i}:")
        pregunta.mostrar_pregunta()
        
        try:
            respuesta = int(input("Tu respuesta (1-4): "))
            if 1 <= respuesta <= 4:
                if pregunta.verificar_respuesta(respuesta):
                    print("¬°Correcto! ‚úì")
                    puntuacion += 1
                else:
                    print(f"Incorrecto. La respuesta correcta era: {pregunta.respuesta}")
            else:
                print("Opci√≥n inv√°lida. Se considera incorrecta.")
        except ValueError:
            print("Por favor, ingresa un n√∫mero del 1 al 4.")
    
    print(f"\n¬°Trivia terminada!")
    print(f"Puntuaci√≥n final: {puntuacion}/{total_preguntas}")
    if puntuacion == total_preguntas:
        print("¬°Excelente! Respondiste todas correctamente.")
    elif puntuacion >= total_preguntas // 2:
        print("¬°Bien hecho! Tienes un buen conocimiento.")
    else:
        print("Sigue estudiando, puedes mejorar.")

def main():
    """Funci√≥n principal que ejecuta todos los ejercicios"""
    print("üéØ PROGRAMA DE EJERCICIOS DE PROGRAMACI√ìN")
    print("=" * 60)
    
    # Ejecutar Ejercicio 1: Objetos
    ejercicio1()
    
    # Ejecutar Ejercicio 2: Listas y Diccionarios
    ejercicio2()
    
    # Ejecutar Ejercicio 3: Trivia con POO
    ejercicio3()
    
    print("\n" + "=" * 60)
    print("üéâ ¬°TODOS LOS EJERCICIOS COMPLETADOS!")
    print("=" * 60)

if __name__ == "__main__":
    main()